plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.netflix.dgs.codegen' version '7.0.3'
}

group = 'xyz.arryan'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('netflixDgsVersion', "10.1.2")
}

dependencies {
    def isMacOS = System.getProperty('os.name').startsWith('Mac OS X')
    def architecture = System.getProperty('os.arch').toLowerCase()
    if (isMacOS && architecture == 'aarch64') {
        implementation('io.netty:netty-resolver-dns-native-macos:4.1.90.Final:osx-aarch_64')
    }
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.google.code.gson:gson:2.13.1'
    implementation("com.openai:openai-java:3.0.2")
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${netflixDgsVersion}"
    }
}

generateJava {
    schemaPaths = ["${projectDir}/src/main/resources/schema"]
    packageName = 'xyz.arryan.livia.codegen'
//    generateClient = true
}

tasks.named('test') {
    useJUnitPlatform()
}

bootRun {
    jvmArgs '--enable-native-access=ALL-UNNAMED'
}
